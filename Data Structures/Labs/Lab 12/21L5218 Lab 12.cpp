
#include<iostream> 
#include<List> 
using namespace std;

class Graph
{
	int v; // No. of vertices 
	list<int>* adj; // adjacency lists 

public:
	Graph(int n)// Constructor 
	{
		adj = new list<int>[n];
		v = n;
	}
	void TakeInput(int n, int w) // to take input from the user in this sequence: number of nodes, what are the neighbors of vertex 0, what are the neighbors of vertex 1, ... so on.
	{
		adj[n].push_back(w);
	}
	void ExploreFunction(int start) // print the paths from start to every other vertex as generated by the DFS method.One path per line.
	{
		DFS(start);
	}

	void DFS(int start)
	{
		int count = 0, prev = 2;
		bool* visited = new bool[v];

		for (int i = 0; i < v; i++)
		{

			for (int k = 0; k < v; k++)
			{
				visited[k] = false;
			}

			DFSHelp(start, i + 2, count, visited, prev);

			prev = count;
			count = 0;
			if (count != prev)
			{
				cout << endl;
			}
			if (count == -1)
			{
				break;
			}
		}


	}

	void DFSHelp(int j, int limit, int& count, bool visited[], int prev)
	{
		if (prev == count)
		{
			prev = count = -1;
			return;
		}

		count++;
		visited[j] = true;
		cout << j << " ";


		list<int>::iterator i;
		for (i = adj[j].begin(); i != adj[j].end(); ++i)
		{

			if (count < limit && !visited[*i])
			{
				DFSHelp(*i, limit, count, visited, prev);

			}
		}

	}






};
int main()
{
	Graph g(4); // Total 5 vertices in graph 
	g.TakeInput(0, 1);
	g.TakeInput(0, 2);
	g.TakeInput(1, 2);
	g.TakeInput(2, 0);
	g.TakeInput(2, 3);
	g.TakeInput(3, 3); cout << "Following is Depth First Traversal: " << endl;
	cout << "For Vertex 2" << endl;
	g.ExploreFunction(2);
	//Sample output of explore function for starting from vertex 2.
	//2 0 
	//2 0 1 
	//2 0 1 3
	//*********
	cout << "For Vertex 1" << endl;
	g.ExploreFunction(1);
	//Sample output of explore function for starting from vertex 1.
	//1 2  
	// 1 2 0 
	//1 2 0 3





	return 0;
}

